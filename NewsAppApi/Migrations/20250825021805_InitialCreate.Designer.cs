// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsAppApi.Data.Contexts;

#nullable disable

namespace NewsAppApi.Migrations
{
    [DbContext(typeof(NewsAppDbContext))]
    [Migration("20250825021805_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NewsAppApi.Models.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            Content = "Nội dung bài viết về AI...",
                            CreatedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/ai.png",
                            Title = "AI đang thay đổi thế giới"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CategoryId = 2,
                            Content = "Nội dung thể thao...",
                            CreatedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/football.png",
                            Title = "Chung kết bóng đá quốc gia"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            CategoryId = 3,
                            Content = "Mẹo sống khỏe...",
                            CreatedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ImageUrl = "/images/health.png",
                            Title = "Sống khỏe mỗi ngày"
                        });
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.ArticleTag", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticlesTags");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ArticleId = 1,
                            TagId = 2
                        },
                        new
                        {
                            ArticleId = 2,
                            TagId = 3
                        },
                        new
                        {
                            ArticleId = 3,
                            TagId = 4
                        });
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookmarks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            CreatedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Tin tức công nghệ",
                            Name = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Thể thao",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Đời sống",
                            Name = "Lifestyle"
                        });
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.ReadHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReadAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("ReadHistory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            ReadAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 2,
                            ReadAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ArticleId = 3,
                            ReadAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AI"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cloud"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Football"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Health"
                        });
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@example.com",
                            FullName = "Admin User",
                            Password = "admin",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "alice@example.com",
                            FullName = "Alice Nguyen",
                            Password = "alice-nguyen",
                            Role = "User"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "bob@example.com",
                            FullName = "Bob Tran",
                            Password = "bob-tran",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.Article", b =>
                {
                    b.HasOne("NewsAppApi.Models.Entities.User", "Author")
                        .WithMany("AuthoredArticles")
                        .HasForeignKey("AuthorId");

                    b.HasOne("NewsAppApi.Models.Entities.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.ArticleTag", b =>
                {
                    b.HasOne("NewsAppApi.Models.Entities.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsAppApi.Models.Entities.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.Bookmark", b =>
                {
                    b.HasOne("NewsAppApi.Models.Entities.Article", "Article")
                        .WithMany("Bookmarks")
                        .HasForeignKey("ArticleId");

                    b.HasOne("NewsAppApi.Models.Entities.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.ReadHistory", b =>
                {
                    b.HasOne("NewsAppApi.Models.Entities.Article", "Article")
                        .WithMany("ReadHistories")
                        .HasForeignKey("ArticleId");

                    b.HasOne("NewsAppApi.Models.Entities.User", "User")
                        .WithMany("ReadHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.Article", b =>
                {
                    b.Navigation("ArticleTags");

                    b.Navigation("Bookmarks");

                    b.Navigation("ReadHistories");
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.Tag", b =>
                {
                    b.Navigation("ArticleTags");
                });

            modelBuilder.Entity("NewsAppApi.Models.Entities.User", b =>
                {
                    b.Navigation("AuthoredArticles");

                    b.Navigation("Bookmarks");

                    b.Navigation("ReadHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
